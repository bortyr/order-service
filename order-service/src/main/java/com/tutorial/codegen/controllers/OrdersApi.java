/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tutorial.codegen.controllers;

import com.tutorial.codegen.model.Order;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-26T23:30:41.658350+01:00[Europe/Berlin]")
@Validated
@Tag(name = "orders", description = "the orders API")
public interface OrdersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /orders : Returns a list of orders.
     *
     * @return A JSON array of orders (status code 200)
     *         or Orders not found. (status code 404)
     */
    @Operation(
        operationId = "ordersGet",
        summary = "Returns a list of orders.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A JSON array of orders", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Orders not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> ordersGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /orders/{id} : Removing an order.
     *
     * @param id  (required)
     * @return Removed an order (status code 200)
     *         or Order with requested id not found. (status code 404)
     */
    @Operation(
        operationId = "ordersIdDelete",
        summary = "Removing an order.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Removed an order"),
            @ApiResponse(responseCode = "404", description = "Order with requested id not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/orders/{id}"
    )
    default ResponseEntity<Void> ordersIdDelete(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Object id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /orders/{id} : Get an order with a given id.
     *
     * @param id  (required)
     * @return Received order with given id. (status code 200)
     *         or Order with requested id not found. (status code 404)
     */
    @Operation(
        operationId = "ordersIdGet",
        summary = "Get an order with a given id.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Received order with given id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "404", description = "Order with requested id not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Order> ordersIdGet(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Object id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

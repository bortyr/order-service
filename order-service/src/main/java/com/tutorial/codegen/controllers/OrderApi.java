/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tutorial.codegen.controllers;

import com.tutorial.codegen.model.Item;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-26T23:30:41.658350+01:00[Europe/Berlin]")
@Validated
@Tag(name = "order", description = "the order API")
public interface OrderApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /order/{id}/commit : Purchase an order
     *
     * @param id  (required)
     * @return Purchased an order. (status code 200)
     *         or Order with requested id not found. (status code 404)
     */
    @Operation(
        operationId = "orderIdCommitPost",
        summary = "Purchase an order",
        responses = {
            @ApiResponse(responseCode = "200", description = "Purchased an order."),
            @ApiResponse(responseCode = "404", description = "Order with requested id not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/order/{id}/commit"
    )
    default ResponseEntity<Void> orderIdCommitPost(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Object id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /order/{id}/item/{itemId} : Removing a line item from an order.
     *
     * @param id  (required)
     * @param itemId  (required)
     * @return Removed line item from an order (status code 200)
     *         or Order with requested id of item not found. (status code 404)
     */
    @Operation(
        operationId = "orderIdItemItemIdDelete",
        summary = "Removing a line item from an order.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Removed line item from an order"),
            @ApiResponse(responseCode = "404", description = "Order with requested id of item not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/order/{id}/item/{itemId}"
    )
    default ResponseEntity<Void> orderIdItemItemIdDelete(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Object id,
        @Parameter(name = "itemId", description = "", required = true) @PathVariable("itemId") Object itemId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /order/{id}/item/{itemId} : Retrieving all line items of an order with a given id.
     *
     * @param id  (required)
     * @param itemId  (required)
     * @return Retrieved item of order with given id. (status code 200)
     *         or Order with requested id of item not found. (status code 404)
     */
    @Operation(
        operationId = "orderIdItemItemIdGet",
        summary = "Retrieving all line items of an order with a given id.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Retrieved item of order with given id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Order with requested id of item not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/order/{id}/item/{itemId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> orderIdItemItemIdGet(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Object id,
        @Parameter(name = "itemId", description = "", required = true) @PathVariable("itemId") Object itemId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /order/{orderId}/item : Adding a new line item to an order
     *
     * @param orderId  (required)
     * @return Added new line item to an order (status code 200)
     *         or Order with requested id of item not found. (status code 404)
     */
    @Operation(
        operationId = "orderOrderIdItemPost",
        summary = "Adding a new line item to an order",
        responses = {
            @ApiResponse(responseCode = "200", description = "Added new line item to an order", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))
            }),
            @ApiResponse(responseCode = "404", description = "Order with requested id of item not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/order/{orderId}/item",
        produces = { "application/json" }
    )
    default ResponseEntity<Item> orderOrderIdItemPost(
        @Parameter(name = "orderId", description = "", required = true) @PathVariable("orderId") Object orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
